name: "Test build & deploy"
on: # this means we can trigger this workflow with push and manually on github dashboard
    push:
        branches: 
            - main # main branch test, build and deploy in the main

jobs: # By default, jobs run in parallel
    test:
        runs-on: ubuntu-latest
        steps:
          - name: Get code # WE want to get the code into our ubuntu environment
            uses: actions/checkout@v4

          # ubuntu already has node js installed. so no need to reinstall it.
          # else if you application relies on another package which is not pre installed you'll need to install it
          - name: Install Node Js
            uses: actions/setup-node@v4
            with:
              node-version: 20

          - name: Install dependencies
            run: npm ci # ci meaning use same packages in the packages-lock.json. However you could simply do `npm install`
          
          - name: Run our Tests on the runner
            run: npm run test
    # build:
    #     needs: test
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Get code
    #           uses: actions/checkout@v4
    #         - name: Cache dependencies
    #           id: cache
    #           uses: actions/cache@v4
    #           with:
    #             path: ~/.npm
    #             key: deps-node-modules-${{ hashFiles('/package-lock.json') }}

    #         -  name: Install dependencies
    #            run: npm ci
    #         -  name: Build website
    #            id: build-website
    #            run: npm run build

    build:
        needs: test
        runs-on: ubuntu-latest
        outputs: 
            output-dist-files: ${{ steps.expose-artifact-name.outputs.files-name }} #output-dist-files is up to you. that's the name which will be exposed to other jobs
      # So this is pointing to the step called expose-artifact-name, and reading the returned output name files-name
        steps:
            - name: Get code
              uses: actions/checkout@v3
          # Cache dependencies
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                path: ~/.npm # cach npm dependencies
                key: deps-node-modules-${{ hashFiles('/package-lock.json') }} # hasfile package-lock.json helps the cache system know if dependencies have changed

            - name: Install dependencies
              run: npm ci
            - name: Build website
              run: npm run build
            - name: Upload artifacts
              uses: actions/upload-artifact@v4  
              with: 
                name: dist-files # creates a new dist file folder and copy files and folders in the paths specified below
                path: .next
            - name: Expouts outputs # outputs are simple values that can be exposed to other jobs
              id: expose-artifact-name 
              run: echo 'files-name=[some-variable-here]' >> $GITHUB_OUTPUT

    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            -  name: Get build artifacts
               uses: actions/download-artifact@v4
               with:
                 name: dist-files

            - name: Output contents
              run: ls

            - name: Deploy
              run: echo "Deploying..."

